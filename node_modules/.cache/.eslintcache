[{"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/index.js":"1","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/reportWebVitals.js":"2","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/App.js":"3","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Sidebar.js":"4","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/SidebarChat.js":"5","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Chat.js":"6","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/firebase.js":"7","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Login.js":"8","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/StateProvider.js":"9","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/reducer.js":"10"},{"size":689,"mtime":1633762997579,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1633425310486,"results":"13","hashOfConfig":"12"},{"size":1027,"mtime":1633763589172,"results":"14","hashOfConfig":"12"},{"size":2280,"mtime":1633763776981,"results":"15","hashOfConfig":"12"},{"size":1609,"mtime":1633766081862,"results":"16","hashOfConfig":"12"},{"size":3994,"mtime":1633768930824,"results":"17","hashOfConfig":"12"},{"size":845,"mtime":1633600897715,"results":"18","hashOfConfig":"12"},{"size":1184,"mtime":1633827292728,"results":"19","hashOfConfig":"12"},{"size":368,"mtime":1633726459214,"results":"20","hashOfConfig":"12"},{"size":408,"mtime":1633726606558,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"53lil4",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/index.js",[],["47","48"],"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/reportWebVitals.js",[],"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/App.js",["49","50"],"import React, { useState } from \"react\";\nimport './App.css';\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() { \n  const [{ user }, dispatch] = useStateValue();\n\n\n  return (\n  // BEM Naming Convention\n  <div className=\"app\">\n    {!user ? (\n      <Login />\n    ) : ( \n      <div className=\"app__body\"> {/* Main Panel */}\n        {/* Manages Room ID Switching */}\n        <Router>\n          {/* Sidebar | Always Loads*/}\n          <Sidebar />\n          {/* Chooses URL depending on Room Chosen */}\n          <Switch>\n\n            <Route path=\"/rooms/:roomID\">\n              {/* Chat */ }\n              <Chat />\n            </Route>   \n            <Route path=\"/\">\n              { /* <h1>Home Screen</h1> */ }\n              <Chat />\n            </Route>\n\n          </Switch>\n        </Router>\n      </div>\n    )}\n  </div>\n  );\n}\n\nexport default App;\n","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Sidebar.js",["51"],"//Capital Filename since its a component\nimport React, { useEffect, useState } from \"react\";\nimport { Avatar, IconButton } from '@material-ui/core';\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport './Sidebar.css';\nimport db from \"./firebase.js\";\nimport { useStateValue } from \"./StateProvider\";\n\n//IconButton gives icons button functionality\n//Every change makes new snapshot, rooms is our array in database\n//Unsubscribe cleans collection after its done\nfunction Sidebar() {\n    const [rooms, setRooms] = useState([]);\n    const [{ user }, dispatch] = useStateValue();\n\n    useEffect(() => {\n        const unsubscribe = db.collection('rooms').onSnapshot((snapshot) => \n            setRooms(snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    data: doc.data(),\n                }))\n            )\n        );\n\n        return () => {\n            unsubscribe();\n        }\n    }, []);\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <Avatar src={user?.photoURL}/>\n\n                <div className=\"sidebar__headerRight\">\n                    <IconButton>\n                        <DonutLargeIcon />\n                    </IconButton>\n                    <IconButton>\n                        <ChatIcon />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                </div>\n            </div>\n\n            <div className=\"sidebar__search\"> \n                <div className=\"sidebar__searchContainer\"> \n                    <SearchOutlined />\n                    <input placeholder=\"Search or start new chat\" type=\"text\" />\n                </div>\n            </div>\n    \n            <div className=\"sidebar__chats\">\n                <SidebarChat addNewChat/>\n                {rooms.map(room => (\n                    <SidebarChat key={room.id} id={room.id}\n                    name={room.data.name} />\n                ))}\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default Sidebar;","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/SidebarChat.js",[],"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Chat.js",["52"],"import React, { useState, useEffect } from 'react';\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport { AttachFile, MoreVert, SearchOutlined } from \"@material-ui/icons\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport \"./Chat.css\";\nimport { useParams } from \"react-router-dom\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport firebase from \"firebase/compat/app\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\n\nfunction Chat() {\n    const [input, setInput] = useState(\"\");\n    const [seed, setSeed] = useState(\"\");\n    const { roomID } = useParams();\n    const [roomName, setRoomName] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [{ user }, dispatch ] = useStateValue();\n\n    useEffect(() => {\n        if (roomID) {\n            db.collection('rooms')\n            .doc(roomID)\n            .onSnapshot((snapshot) => \n                setRoomName(snapshot.data().name));\n\n            db.collection(\"rooms\")\n                .doc(roomID)\n                .collection(\"messages\")\n                .orderBy('timestamp', 'asc')\n                .onSnapshot(snapshot => (\n                    setMessages(snapshot.docs.map(doc => doc.data()))\n            ))\n        }\n    }, [roomID]);\n\n    /* icon changes whenever roomID is detected changing */\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000));\n    }, [roomID]);\n\n    /*e as event | preventdefault stops refresh*/\n    const sendMessage = (e) => {\n        e.preventDefault();\n        /*console.log('You typed >>> ', input);*/\n\n        db.collection('rooms').doc(roomID).collection('messages').add({\n            message:input,\n            name: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n\n        setInput(\"\");\n    }\n\n    return (\n        <div className='chat'>\n            <div className=\"chat__header\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\n\n                <div className=\"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p>\n                        last seen{\" \"}\n                        {new Date(\n                        messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\n                    </p>\n                </div>\n\n                <div className=\"chat__headerRight\">\n                    <IconButton>\n                        <SearchOutlined />\n                    </IconButton>\n                    <IconButton>\n                        <AttachFile />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVert />\n                    </IconButton>\n                </div>\n            </div>    \n        \n            <div className=\"chat__body\">\n                {messages.map(message => (\n                    <p className={`chat__message ${message.name === user.displayName && \"chat__reciever\"}`}>\n                        <span className=\"chat__name\">{message.name}</span>\n                        {message.message}\n                        <span className=\"chat__timestamp\">\n                            {new Date(message.timestamp?.toDate()).toUTCString()}\n                        </span>\n                    </p>\n                ))}\n\n            </div>  \n\n            <div className=\"chat__footer\">\n                <InsertEmoticonIcon />\n                <form>\n                    <input \n                        value={input} \n                        onChange={e => setInput(e.target.value)} placeholder=\"Type a message\" \n                        type=\"text\" \n                    />\n                    <button onClick={sendMessage} type=\"submit\">Send a message</button>\n                </form>\n                <MicIcon />\n                <IconButton>\n                    <RedoIcon />\n                </IconButton>\n            </div>  \n        </div>\n    )\n}\n\nexport default Chat;\n","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/firebase.js",[],"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/Login.js",["53"],"import React from 'react';\nimport { Button } from \"@material-ui/core\";\nimport './Login.css';\nimport { auth, provider } from \"./firebase\";\nimport { actionTypes } from './reducer';\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Login() {\n    const [{}, dispatch] = useStateValue();\n\n    const signIn = () => {\n        auth\n            .signInWithPopup(provider)\n            .then((result) => {\n                dispatch({\n                    type: actionTypes.SET_USER,\n                    user: result.user,\n                });\n            })\n            .catch((error)=> alert(error.message));\n    };\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n                <img\n                    src=\"https://stickershop.line-scdn.net/stickershop/v1/product/11491103/LINEStorePC/main.png;compress=true\" alt=\"\" \n                />\n                <div className=\"login__text\">\n                    <h1>Sign in to AniChat</h1>\n                </div>\n\n                <Button type=\"submit\" onClick={signIn}>\n                    Sign In With Google\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/StateProvider.js",[],"/Users/havok/KBProjects/KBproject_AniChat/AniChat/src/reducer.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":10,"column":20,"nodeType":"60","messageId":"61","endLine":10,"endColumn":28},{"ruleId":"58","severity":1,"message":"62","line":18,"column":22,"nodeType":"60","messageId":"61","endLine":18,"endColumn":30},{"ruleId":"58","severity":1,"message":"62","line":19,"column":22,"nodeType":"60","messageId":"61","endLine":19,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":9,"column":12,"nodeType":"65","messageId":"66","endLine":9,"endColumn":14},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]